// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entangle/distributorsauth/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDistributorsRequest is request type for Query/Distributors RPC method.
type QueryDistributorsRequest struct {
}

func (m *QueryDistributorsRequest) Reset()         { *m = QueryDistributorsRequest{} }
func (m *QueryDistributorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDistributorsRequest) ProtoMessage()    {}
func (*QueryDistributorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{0}
}
func (m *QueryDistributorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDistributorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDistributorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDistributorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDistributorsRequest.Merge(m, src)
}
func (m *QueryDistributorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDistributorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDistributorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDistributorsRequest proto.InternalMessageInfo

// QueryDistributorsResponse is response type for the Query/Distributors RPC method
type QueryDistributorsResponse struct {
	// distributors contains all the queried distributors.
	Distributors []DistributorInfo `protobuf:"bytes,1,rep,name=distributors,proto3" json:"distributors"`
}

func (m *QueryDistributorsResponse) Reset()         { *m = QueryDistributorsResponse{} }
func (m *QueryDistributorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDistributorsResponse) ProtoMessage()    {}
func (*QueryDistributorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{1}
}
func (m *QueryDistributorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDistributorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDistributorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDistributorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDistributorsResponse.Merge(m, src)
}
func (m *QueryDistributorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDistributorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDistributorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDistributorsResponse proto.InternalMessageInfo

func (m *QueryDistributorsResponse) GetDistributors() []DistributorInfo {
	if m != nil {
		return m.Distributors
	}
	return nil
}

// QueryDistributorRequest is response type for the Query/Distributor RPC method
type QueryDistributorRequest struct {
	// distributor_addr defines the distributor address to query for.
	DistributorAddr string `protobuf:"bytes,1,opt,name=distributor_addr,json=distributorAddr,proto3" json:"distributor_addr,omitempty"`
}

func (m *QueryDistributorRequest) Reset()         { *m = QueryDistributorRequest{} }
func (m *QueryDistributorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDistributorRequest) ProtoMessage()    {}
func (*QueryDistributorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{2}
}
func (m *QueryDistributorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDistributorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDistributorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDistributorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDistributorRequest.Merge(m, src)
}
func (m *QueryDistributorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDistributorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDistributorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDistributorRequest proto.InternalMessageInfo

func (m *QueryDistributorRequest) GetDistributorAddr() string {
	if m != nil {
		return m.DistributorAddr
	}
	return ""
}

// QueryDistributorResponse is response type for the Query/Distributor RPC method
type QueryDistributorResponse struct {
	// distributor defines the distributor info.
	Distributor DistributorInfo `protobuf:"bytes,1,opt,name=distributor,proto3" json:"distributor"`
}

func (m *QueryDistributorResponse) Reset()         { *m = QueryDistributorResponse{} }
func (m *QueryDistributorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDistributorResponse) ProtoMessage()    {}
func (*QueryDistributorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{3}
}
func (m *QueryDistributorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDistributorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDistributorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDistributorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDistributorResponse.Merge(m, src)
}
func (m *QueryDistributorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDistributorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDistributorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDistributorResponse proto.InternalMessageInfo

func (m *QueryDistributorResponse) GetDistributor() DistributorInfo {
	if m != nil {
		return m.Distributor
	}
	return DistributorInfo{}
}

// QueryAdminsRequest is request type for Query/Admns RPC method.
type QueryAdminsRequest struct {
}

func (m *QueryAdminsRequest) Reset()         { *m = QueryAdminsRequest{} }
func (m *QueryAdminsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAdminsRequest) ProtoMessage()    {}
func (*QueryAdminsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{4}
}
func (m *QueryAdminsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminsRequest.Merge(m, src)
}
func (m *QueryAdminsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminsRequest proto.InternalMessageInfo

// QueryAdminsResponse is response type for the Query/Admins RPC method
type QueryAdminsResponse struct {
	// admins contains all the queried admins.
	Admins []Admin `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins"`
}

func (m *QueryAdminsResponse) Reset()         { *m = QueryAdminsResponse{} }
func (m *QueryAdminsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAdminsResponse) ProtoMessage()    {}
func (*QueryAdminsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{5}
}
func (m *QueryAdminsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminsResponse.Merge(m, src)
}
func (m *QueryAdminsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminsResponse proto.InternalMessageInfo

func (m *QueryAdminsResponse) GetAdmins() []Admin {
	if m != nil {
		return m.Admins
	}
	return nil
}

// QueryAdminRequest is response type for the Query/Admin RPC method
type QueryAdminRequest struct {
	// admin_addr defines the admin address to query for.
	AdminAddr string `protobuf:"bytes,1,opt,name=admin_addr,json=adminAddr,proto3" json:"admin_addr,omitempty"`
}

func (m *QueryAdminRequest) Reset()         { *m = QueryAdminRequest{} }
func (m *QueryAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAdminRequest) ProtoMessage()    {}
func (*QueryAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{6}
}
func (m *QueryAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminRequest.Merge(m, src)
}
func (m *QueryAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminRequest proto.InternalMessageInfo

func (m *QueryAdminRequest) GetAdminAddr() string {
	if m != nil {
		return m.AdminAddr
	}
	return ""
}

// QueryAdminResponse is response type for the Query/Admin RPC method
type QueryAdminResponse struct {
	// admin defines the admin info.
	Admin Admin `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin"`
}

func (m *QueryAdminResponse) Reset()         { *m = QueryAdminResponse{} }
func (m *QueryAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAdminResponse) ProtoMessage()    {}
func (*QueryAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_372dea9b50f9a52c, []int{7}
}
func (m *QueryAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminResponse.Merge(m, src)
}
func (m *QueryAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminResponse proto.InternalMessageInfo

func (m *QueryAdminResponse) GetAdmin() Admin {
	if m != nil {
		return m.Admin
	}
	return Admin{}
}

func init() {
	proto.RegisterType((*QueryDistributorsRequest)(nil), "entangle.distributorsauth.QueryDistributorsRequest")
	proto.RegisterType((*QueryDistributorsResponse)(nil), "entangle.distributorsauth.QueryDistributorsResponse")
	proto.RegisterType((*QueryDistributorRequest)(nil), "entangle.distributorsauth.QueryDistributorRequest")
	proto.RegisterType((*QueryDistributorResponse)(nil), "entangle.distributorsauth.QueryDistributorResponse")
	proto.RegisterType((*QueryAdminsRequest)(nil), "entangle.distributorsauth.QueryAdminsRequest")
	proto.RegisterType((*QueryAdminsResponse)(nil), "entangle.distributorsauth.QueryAdminsResponse")
	proto.RegisterType((*QueryAdminRequest)(nil), "entangle.distributorsauth.QueryAdminRequest")
	proto.RegisterType((*QueryAdminResponse)(nil), "entangle.distributorsauth.QueryAdminResponse")
}

func init() {
	proto.RegisterFile("entangle/distributorsauth/query.proto", fileDescriptor_372dea9b50f9a52c)
}

var fileDescriptor_372dea9b50f9a52c = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x40, 0x22, 0x75, 0x52, 0x09, 0x18, 0x2a, 0x91, 0x1a, 0x6a, 0x82, 0x2b, 0x44,
	0x83, 0x88, 0x8d, 0x12, 0x38, 0x81, 0x90, 0x5a, 0x95, 0x43, 0x6f, 0x60, 0xc1, 0x85, 0x0b, 0xda,
	0xd8, 0xc6, 0xb1, 0x48, 0x77, 0x13, 0x7b, 0x2d, 0x51, 0xa1, 0x5e, 0xb8, 0xc2, 0x01, 0x09, 0xf1,
	0x06, 0xbc, 0x01, 0x2f, 0xd1, 0x63, 0x25, 0x2e, 0x9c, 0x10, 0x4a, 0x78, 0x10, 0x94, 0xf5, 0x3a,
	0xdd, 0xa4, 0x4e, 0x49, 0x7a, 0xb3, 0x66, 0xe6, 0xff, 0xe7, 0xf3, 0xe8, 0xd7, 0xc2, 0x9d, 0x80,
	0x09, 0xca, 0xc2, 0x5e, 0xe0, 0xf8, 0x51, 0x22, 0xe2, 0xa8, 0x93, 0x0a, 0x1e, 0x27, 0x34, 0x15,
	0x5d, 0x67, 0x90, 0x06, 0xf1, 0x81, 0xdd, 0x8f, 0xb9, 0xe0, 0xb8, 0x9e, 0x8f, 0xd9, 0xb3, 0x63,
	0xc6, 0x5a, 0xc8, 0x43, 0x2e, 0xa7, 0x9c, 0xf1, 0x57, 0x26, 0x30, 0x6e, 0x86, 0x9c, 0x8f, 0x5d,
	0x69, 0x3f, 0x72, 0x28, 0x63, 0x5c, 0x50, 0x11, 0x71, 0x96, 0xa8, 0xee, 0x83, 0xf9, 0x5b, 0x67,
	0x0b, 0x99, 0xc2, 0x32, 0xa0, 0xf6, 0x62, 0xcc, 0xb3, 0xab, 0xb5, 0xdd, 0x60, 0x90, 0x06, 0x89,
	0xb0, 0x06, 0xb0, 0x5e, 0xd0, 0x4b, 0xfa, 0x9c, 0x25, 0x01, 0xbe, 0x84, 0x55, 0xdd, 0xb2, 0x46,
	0xea, 0x17, 0xb7, 0xaa, 0xad, 0x7b, 0xf6, 0xdc, 0x1f, 0xb2, 0x35, 0x9b, 0x3d, 0xf6, 0x96, 0xef,
	0x5c, 0x3a, 0xfa, 0x7d, 0xab, 0xe4, 0x4e, 0xb9, 0x58, 0xbb, 0x70, 0x7d, 0x76, 0xa5, 0xa2, 0xc1,
	0x06, 0x5c, 0xd1, 0x46, 0xdf, 0x50, 0xdf, 0x8f, 0x6b, 0xa4, 0x4e, 0xb6, 0x56, 0xdc, 0xcb, 0x5a,
	0x7d, 0xdb, 0xf7, 0x63, 0x8b, 0x9d, 0xfe, 0xa9, 0x09, 0xb7, 0x0b, 0x55, 0x6d, 0x5c, 0x3a, 0x9c,
	0x07, 0x5b, 0x37, 0xb1, 0xd6, 0x00, 0xe5, 0xbe, 0x6d, 0x7f, 0x3f, 0x62, 0x93, 0xf3, 0xbd, 0x82,
	0x6b, 0x53, 0x55, 0x05, 0xf0, 0x14, 0x2a, 0x54, 0x56, 0xd4, 0xc9, 0xea, 0x67, 0xec, 0x96, 0x52,
	0xb5, 0x51, 0xa9, 0xac, 0x16, 0x5c, 0x3d, 0xb1, 0xcd, 0x8f, 0xb3, 0x01, 0x20, 0xdb, 0xfa, 0x59,
	0x56, 0x64, 0x45, 0x1e, 0xc4, 0xd5, 0x01, 0x27, 0x24, 0x4f, 0xa0, 0x2c, 0x47, 0xd4, 0x11, 0x16,
	0x05, 0xc9, 0x44, 0xad, 0x4f, 0x65, 0x28, 0x4b, 0x53, 0xfc, 0x4e, 0x60, 0x55, 0xcf, 0x08, 0xb6,
	0xcf, 0x70, 0x9a, 0x97, 0x36, 0xe3, 0xe1, 0x72, 0xa2, 0xec, 0x1f, 0xac, 0xc6, 0xc7, 0x9f, 0x7f,
	0xbf, 0x5e, 0xd8, 0xc4, 0xdb, 0x4e, 0xae, 0x6e, 0x76, 0x7a, 0xdc, 0x7b, 0xe7, 0x75, 0x69, 0xc4,
	0xa6, 0x42, 0x8f, 0x3f, 0x08, 0x54, 0x35, 0x0f, 0x6c, 0x2d, 0xb1, 0x30, 0x87, 0x6c, 0x2f, 0xa5,
	0x51, 0x8c, 0x8f, 0x25, 0xe3, 0x23, 0x6c, 0x17, 0x32, 0x7e, 0x98, 0x4d, 0xf5, 0xa1, 0x8e, 0x8d,
	0x9f, 0x09, 0x54, 0xb2, 0x04, 0x61, 0xf3, 0x7f, 0xcb, 0xa7, 0xf2, 0x67, 0xd8, 0x8b, 0x8e, 0x2b,
	0xcc, 0x4d, 0x89, 0xb9, 0x81, 0x37, 0x0a, 0x31, 0xb3, 0xf4, 0xe1, 0x37, 0x02, 0x65, 0xa9, 0xc3,
	0xfb, 0x0b, 0xd9, 0xe7, 0x30, 0xcd, 0x05, 0xa7, 0x15, 0x8b, 0x23, 0x59, 0x1a, 0x78, 0xb7, 0xf8,
	0x64, 0x27, 0x59, 0x3f, 0xcc, 0xc0, 0x76, 0xbc, 0xa3, 0xa1, 0x49, 0x8e, 0x87, 0x26, 0xf9, 0x33,
	0x34, 0xc9, 0x97, 0x91, 0x59, 0x3a, 0x1e, 0x99, 0xa5, 0x5f, 0x23, 0xb3, 0xf4, 0x7a, 0x2f, 0x8c,
	0x44, 0x37, 0xed, 0xd8, 0x1e, 0xdf, 0x77, 0x9e, 0xe5, 0x66, 0xcf, 0xc7, 0x8f, 0x9f, 0xc7, 0x7b,
	0x85, 0xf6, 0xef, 0x4f, 0xbf, 0x9e, 0xe2, 0xa0, 0x1f, 0x24, 0x9d, 0x8a, 0x7c, 0x33, 0xdb, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xa3, 0xe7, 0x3b, 0xdd, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries  distributor info for all distributors
	Distributors(ctx context.Context, in *QueryDistributorsRequest, opts ...grpc.CallOption) (*QueryDistributorsResponse, error)
	// Queries distributor info for given distributor address.
	Distributor(ctx context.Context, in *QueryDistributorRequest, opts ...grpc.CallOption) (*QueryDistributorResponse, error)
	// Queries admin info for all admins
	Admins(ctx context.Context, in *QueryAdminsRequest, opts ...grpc.CallOption) (*QueryAdminsResponse, error)
	// Queries admin info for given admin address.
	Admin(ctx context.Context, in *QueryAdminRequest, opts ...grpc.CallOption) (*QueryAdminResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Distributors(ctx context.Context, in *QueryDistributorsRequest, opts ...grpc.CallOption) (*QueryDistributorsResponse, error) {
	out := new(QueryDistributorsResponse)
	err := c.cc.Invoke(ctx, "/entangle.distributorsauth.Query/Distributors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Distributor(ctx context.Context, in *QueryDistributorRequest, opts ...grpc.CallOption) (*QueryDistributorResponse, error) {
	out := new(QueryDistributorResponse)
	err := c.cc.Invoke(ctx, "/entangle.distributorsauth.Query/Distributor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Admins(ctx context.Context, in *QueryAdminsRequest, opts ...grpc.CallOption) (*QueryAdminsResponse, error) {
	out := new(QueryAdminsResponse)
	err := c.cc.Invoke(ctx, "/entangle.distributorsauth.Query/Admins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Admin(ctx context.Context, in *QueryAdminRequest, opts ...grpc.CallOption) (*QueryAdminResponse, error) {
	out := new(QueryAdminResponse)
	err := c.cc.Invoke(ctx, "/entangle.distributorsauth.Query/Admin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries  distributor info for all distributors
	Distributors(context.Context, *QueryDistributorsRequest) (*QueryDistributorsResponse, error)
	// Queries distributor info for given distributor address.
	Distributor(context.Context, *QueryDistributorRequest) (*QueryDistributorResponse, error)
	// Queries admin info for all admins
	Admins(context.Context, *QueryAdminsRequest) (*QueryAdminsResponse, error)
	// Queries admin info for given admin address.
	Admin(context.Context, *QueryAdminRequest) (*QueryAdminResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Distributors(ctx context.Context, req *QueryDistributorsRequest) (*QueryDistributorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distributors not implemented")
}
func (*UnimplementedQueryServer) Distributor(ctx context.Context, req *QueryDistributorRequest) (*QueryDistributorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distributor not implemented")
}
func (*UnimplementedQueryServer) Admins(ctx context.Context, req *QueryAdminsRequest) (*QueryAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admins not implemented")
}
func (*UnimplementedQueryServer) Admin(ctx context.Context, req *QueryAdminRequest) (*QueryAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admin not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Distributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDistributorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Distributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entangle.distributorsauth.Query/Distributors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Distributors(ctx, req.(*QueryDistributorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Distributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Distributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entangle.distributorsauth.Query/Distributor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Distributor(ctx, req.(*QueryDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Admins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Admins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entangle.distributorsauth.Query/Admins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Admins(ctx, req.(*QueryAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Admin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Admin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entangle.distributorsauth.Query/Admin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Admin(ctx, req.(*QueryAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entangle.distributorsauth.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Distributors",
			Handler:    _Query_Distributors_Handler,
		},
		{
			MethodName: "Distributor",
			Handler:    _Query_Distributor_Handler,
		},
		{
			MethodName: "Admins",
			Handler:    _Query_Admins_Handler,
		},
		{
			MethodName: "Admin",
			Handler:    _Query_Admin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entangle/distributorsauth/query.proto",
}

func (m *QueryDistributorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDistributorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDistributorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDistributorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDistributorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDistributorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distributors) > 0 {
		for iNdEx := len(m.Distributors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDistributorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDistributorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDistributorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributorAddr) > 0 {
		i -= len(m.DistributorAddr)
		copy(dAtA[i:], m.DistributorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DistributorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDistributorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDistributorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDistributorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Distributor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAdminsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAdminsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddr) > 0 {
		i -= len(m.AdminAddr)
		copy(dAtA[i:], m.AdminAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AdminAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Admin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDistributorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDistributorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Distributors) > 0 {
		for _, e := range m.Distributors {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDistributorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DistributorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDistributorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Distributor.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAdminsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAdminsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Admin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDistributorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDistributorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDistributorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDistributorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDistributorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDistributorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributors = append(m.Distributors, DistributorInfo{})
			if err := m.Distributors[len(m.Distributors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDistributorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDistributorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDistributorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDistributorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDistributorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDistributorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Distributor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, Admin{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
