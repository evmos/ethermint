export interface ProtobufAny {
    typeUrl?: string;
    /** @format byte */
    value?: string;
}
export interface RpcStatus {
    /** @format int32 */
    code?: number;
    message?: string;
    details?: ProtobufAny[];
}
/**
 * AccessTuple is the element type of an access list.
 */
export interface V1Alpha1AccessTuple {
    address?: string;
    storageKeys?: string[];
}
/**
* Log represents an protobuf compatible Ethereum Log that defines a contract
log event. These events are generated by the LOG opcode and stored/indexed by
the node.
*/
export interface V1Alpha1Log {
    address?: string;
    /** list of topics provided by the contract. */
    topics?: string[];
    /** @format byte */
    data?: string;
    /** @format uint64 */
    blockNumber?: string;
    txHash?: string;
    /** @format uint64 */
    txIndex?: string;
    blockHash?: string;
    /** @format uint64 */
    index?: string;
    /**
     * The Removed field is true if this log was reverted due to a chain
     * reorganisation. You must pay attention to this field if you receive logs
     * through a filter query.
     */
    removed?: boolean;
}
/**
 * MsgEthereumTxResponse defines the Msg/EthereumTx response type.
 */
export interface V1Alpha1MsgEthereumTxResponse {
    /**
     * contract_address contains the ethereum address of the created contract (if
     * any). If the state transition is an evm.Call, the contract address will be
     * empty.
     */
    contractAddress?: string;
    /** @format byte */
    bloom?: string;
    /**
     * tx_logs contains the transaction hash and the proto-compatible ethereum
     * logs.
     */
    txLogs?: V1Alpha1TransactionLogs;
    /**
     * ret defines the bytes from the execution.
     * @format byte
     */
    ret?: string;
    reverted?: boolean;
}
export interface V1Alpha1Params {
    /**
     * evm_denom represents the token denomination used to run the EVM state
     * transitions.
     */
    evmDenom?: string;
    enableCreate?: boolean;
    enableCall?: boolean;
    extraEips?: string[];
}
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 */
export interface V1Alpha1QueryAccountResponse {
    /** balance is the balance of the EVM denomination. */
    balance?: string;
    /**
     * code_hash is the code bytes from the EOA.
     * @format byte
     */
    codeHash?: string;
    /**
     * nonce is the account's sequence number.
     * @format uint64
     */
    nonce?: string;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 */
export interface V1Alpha1QueryBalanceResponse {
    /** balance is the balance of the EVM denomination. */
    balance?: string;
}
/**
* QueryBlockBloomResponse is the response type for the Query/BlockBloom RPC
method.
*/
export interface V1Alpha1QueryBlockBloomResponse {
    /**
     * bloom represents bloom filter for the given block hash.
     * @format byte
     */
    bloom?: string;
}
/**
 * QueryTxLogs is the response type for the Query/BlockLogs RPC method.
 */
export interface V1Alpha1QueryBlockLogsResponse {
    /** logs represents the ethereum logs generated at the given block hash. */
    txLogs?: V1Alpha1TransactionLogs[];
}
/**
* QueryCodeResponse is the response type for the Query/Code RPC
method.
*/
export interface V1Alpha1QueryCodeResponse {
    /**
     * code represents the code bytes from an ethereum address.
     * @format byte
     */
    code?: string;
}
/**
 * QueryCosmosAccountResponse is the response type for the Query/CosmosAccount RPC method.
 */
export interface V1Alpha1QueryCosmosAccountResponse {
    /** cosmos_address is the cosmos address of the account. */
    cosmosAddress?: string;
    /**
     * sequence is the account's sequence number.
     * @format uint64
     */
    sequence?: string;
    /** @format uint64 */
    accountNumber?: string;
}
/**
 * QueryParamsResponse defines the response type for querying x/evm parameters.
 */
export interface V1Alpha1QueryParamsResponse {
    /** params define the evm module parameters. */
    params?: V1Alpha1Params;
}
export interface V1Alpha1QueryStaticCallResponse {
    /** @format byte */
    data?: string;
}
/**
* QueryStorageResponse is the response type for the Query/Storage RPC
method.
*/
export interface V1Alpha1QueryStorageResponse {
    /** key defines the storage state value hash associated with the given key. */
    value?: string;
}
/**
 * QueryTxLogs is the response type for the Query/TxLogs RPC method.
 */
export interface V1Alpha1QueryTxLogsResponse {
    /** logs represents the ethereum logs generated from the given transaction. */
    logs?: V1Alpha1Log[];
}
/**
 * QueryTxReceiptResponse is the response type for the Query/TxReceipt RPC method.
 */
export interface V1Alpha1QueryTxReceiptResponse {
    /** receipt represents the ethereum receipt for the given transaction. */
    receipt?: V1Alpha1TxReceipt;
}
/**
 * QueryTxReceiptsByBlockHashResponse is the response type for the Query/TxReceiptsByBlockHash RPC method.
 */
export interface V1Alpha1QueryTxReceiptsByBlockHashResponse {
    receipts?: V1Alpha1TxReceipt[];
}
/**
 * QueryTxReceiptsByBlockHeightResponse is the response type for the Query/TxReceiptsByBlockHeight RPC method.
 */
export interface V1Alpha1QueryTxReceiptsByBlockHeightResponse {
    receipts?: V1Alpha1TxReceipt[];
}
/**
* TransactionLogs define the logs generated from a transaction execution
with a given hash. It it used for import/export data as transactions are not
persisted on blockchain state after an upgrade.
*/
export interface V1Alpha1TransactionLogs {
    hash?: string;
    logs?: V1Alpha1Log[];
}
/**
* TxData implements the Ethereum transaction data structure. It is used
solely as intended in Ethereum abiding by the protocol.
*/
export interface V1Alpha1TxData {
    /** @format byte */
    chainId?: string;
    /**
     * nonce corresponds to the account nonce (transaction sequence).
     * @format uint64
     */
    nonce?: string;
    /**
     * price defines the unsigned integer value of the gas price in bytes.
     * @format byte
     */
    gasPrice?: string;
    /**
     * gas defines the gas limit defined for the transaction.
     * @format uint64
     */
    gas?: string;
    to?: string;
    /**
     * value defines the unsigned integer value of the transaction amount.
     * @format byte
     */
    value?: string;
    /**
     * input defines the data payload bytes of the transaction.
     * @format byte
     */
    input?: string;
    accesses?: V1Alpha1AccessTuple[];
    /** @format byte */
    v?: string;
    /** @format byte */
    r?: string;
    /** @format byte */
    s?: string;
}
/**
 * TxReceipt defines the receipt type stored in KV for each EVM transaction.
 */
export interface V1Alpha1TxReceipt {
    hash?: string;
    from?: string;
    /**
     * TxData implements the Ethereum transaction data structure. It is used
     * solely as intended in Ethereum abiding by the protocol.
     */
    data?: V1Alpha1TxData;
    /** TxResult stores results of Tx execution. */
    result?: V1Alpha1TxResult;
    /** @format uint64 */
    index?: string;
    /** @format uint64 */
    blockHeight?: string;
    blockHash?: string;
}
/**
 * TxResult stores results of Tx execution.
 */
export interface V1Alpha1TxResult {
    /**
     * contract_address contains the ethereum address of the created contract (if
     * any). If the state transition is an evm.Call, the contract address will be
     * empty.
     */
    contractAddress?: string;
    /** @format byte */
    bloom?: string;
    /**
     * tx_logs contains the transaction hash and the proto-compatible ethereum
     * logs.
     */
    txLogs?: V1Alpha1TransactionLogs;
    /**
     * ret defines the bytes from the execution.
     * @format byte
     */
    ret?: string;
    reverted?: boolean;
    /** @format uint64 */
    gasUsed?: string;
}
export declare type QueryParamsType = Record<string | number, any>;
export declare type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;
export interface FullRequestParams extends Omit<RequestInit, "body"> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType;
    /** query params */
    query?: QueryParamsType;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: keyof Omit<Body, "body" | "bodyUsed">;
    /** request body */
    body?: unknown;
    /** base url */
    baseUrl?: string;
    /** request cancellation token */
    cancelToken?: CancelToken;
}
export declare type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;
export interface ApiConfig<SecurityDataType = unknown> {
    baseUrl?: string;
    baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
    securityWorker?: (securityData: SecurityDataType) => RequestParams | void;
}
export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
declare type CancelToken = Symbol | string | number;
export declare enum ContentType {
    Json = "application/json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded"
}
export declare class HttpClient<SecurityDataType = unknown> {
    baseUrl: string;
    private securityData;
    private securityWorker;
    private abortControllers;
    private baseApiParams;
    constructor(apiConfig?: ApiConfig<SecurityDataType>);
    setSecurityData: (data: SecurityDataType) => void;
    private addQueryParam;
    protected toQueryString(rawQuery?: QueryParamsType): string;
    protected addQueryParams(rawQuery?: QueryParamsType): string;
    private contentFormatters;
    private mergeRequestParams;
    private createAbortSignal;
    abortRequest: (cancelToken: CancelToken) => void;
    request: <T = any, E = any>({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }: FullRequestParams) => Promise<HttpResponse<T, E>>;
}
/**
 * @title ethermint/evm/v1alpha1/tx.proto
 * @version version not set
 */
export declare class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
    /**
     * No description
     *
     * @tags Query
     * @name QueryAccount
     * @summary Account queries an Ethereum account.
     * @request GET:/ethermint/evm/v1alpha1/account/{address}
     */
    queryAccount: (address: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryAccountResponse, RpcStatus>>;
    /**
   * No description
   *
   * @tags Query
   * @name QueryBalance
   * @summary Balance queries the balance of a the EVM denomination for a single
  EthAccount.
   * @request GET:/ethermint/evm/v1alpha1/balances/{address}
   */
    queryBalance: (address: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryBalanceResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryBlockBloom
     * @summary BlockBloom queries the block bloom filter bytes at a given height.
     * @request GET:/ethermint/evm/v1alpha1/block_bloom
     */
    queryBlockBloom: (query?: {
        height?: string;
    }, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryBlockBloomResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryBlockLogs
     * @summary BlockLogs queries all the ethereum logs for a given block hash.
     * @request GET:/ethermint/evm/v1alpha1/block_logs/{hash}
     */
    queryBlockLogs: (hash: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryBlockLogsResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryCode
     * @summary Code queries the balance of all coins for a single account.
     * @request GET:/ethermint/evm/v1alpha1/codes/{address}
     */
    queryCode: (address: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryCodeResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryCosmosAccount
     * @summary Account queries an Ethereum account's Cosmos Address.
     * @request GET:/ethermint/evm/v1alpha1/cosmos_account/{address}
     */
    queryCosmosAccount: (address: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryCosmosAccountResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryParams
     * @summary Params queries the parameters of x/evm module.
     * @request GET:/ethermint/evm/v1alpha1/params
     */
    queryParams: (params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryParamsResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryStaticCall
     * @summary StaticCall queries the static call value of x/evm module.
     * @request GET:/ethermint/evm/v1alpha1/static_call
     */
    queryStaticCall: (query?: {
        address?: string;
        input?: string;
    }, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryStaticCallResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryStorage
     * @summary Storage queries the balance of all coins for a single account.
     * @request GET:/ethermint/evm/v1alpha1/storage/{address}/{key}
     */
    queryStorage: (address: string, key: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryStorageResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryTxLogs
     * @summary TxLogs queries ethereum logs from a transaction.
     * @request GET:/ethermint/evm/v1alpha1/tx_logs/{hash}
     */
    queryTxLogs: (hash: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryTxLogsResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryTxReceipt
     * @summary TxReceipt queries a receipt by a transaction hash.
     * @request GET:/ethermint/evm/v1alpha1/tx_receipt/{hash}
     */
    queryTxReceipt: (hash: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryTxReceiptResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryTxReceiptsByBlockHeight
     * @summary TxReceiptsByBlockHeight queries tx receipts by a block height.
     * @request GET:/ethermint/evm/v1alpha1/tx_receipts_block/{height}
     */
    queryTxReceiptsByBlockHeight: (height: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryTxReceiptsByBlockHeightResponse, RpcStatus>>;
    /**
     * No description
     *
     * @tags Query
     * @name QueryTxReceiptsByBlockHash
     * @summary TxReceiptsByBlockHash queries tx receipts by a block hash.
     * @request GET:/ethermint/evm/v1alpha1/tx_receipts_block_hash/{hash}
     */
    queryTxReceiptsByBlockHash: (hash: string, params?: RequestParams) => Promise<HttpResponse<V1Alpha1QueryTxReceiptsByBlockHashResponse, RpcStatus>>;
}
export {};
